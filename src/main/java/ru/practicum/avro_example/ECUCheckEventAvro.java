/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package ru.practicum.avro_example;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class ECUCheckEventAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ECUCheckEventAvro\",\"namespace\":\"ru.practicum.avro_example\",\"fields\":[]}");
    private static final long serialVersionUID = 603735862185253065L;
    private static final SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<ECUCheckEventAvro> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<ECUCheckEventAvro> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<ECUCheckEventAvro>
            WRITER$ = (org.apache.avro.io.DatumWriter<ECUCheckEventAvro>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<ECUCheckEventAvro>
            READER$ = (org.apache.avro.io.DatumReader<ECUCheckEventAvro>) MODEL$.createDatumReader(SCHEMA$);

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<ECUCheckEventAvro> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<ECUCheckEventAvro> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<ECUCheckEventAvro> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a ECUCheckEventAvro from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a ECUCheckEventAvro instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static ECUCheckEventAvro fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new ECUCheckEventAvro RecordBuilder.
     *
     * @return A new ECUCheckEventAvro RecordBuilder
     */
    public static ru.practicum.avro_example.ECUCheckEventAvro.Builder newBuilder() {
        return new ru.practicum.avro_example.ECUCheckEventAvro.Builder();
    }

    /**
     * Creates a new ECUCheckEventAvro RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new ECUCheckEventAvro RecordBuilder
     */
    public static ru.practicum.avro_example.ECUCheckEventAvro.Builder newBuilder(ru.practicum.avro_example.ECUCheckEventAvro.Builder other) {
        if (other == null) {
            return new ru.practicum.avro_example.ECUCheckEventAvro.Builder();
        } else {
            return new ru.practicum.avro_example.ECUCheckEventAvro.Builder(other);
        }
    }

    /**
     * Creates a new ECUCheckEventAvro RecordBuilder by copying an existing ECUCheckEventAvro instance.
     *
     * @param other The existing instance to copy.
     * @return A new ECUCheckEventAvro RecordBuilder
     */
    public static ru.practicum.avro_example.ECUCheckEventAvro.Builder newBuilder(ru.practicum.avro_example.ECUCheckEventAvro other) {
        if (other == null) {
            return new ru.practicum.avro_example.ECUCheckEventAvro.Builder();
        } else {
            return new ru.practicum.avro_example.ECUCheckEventAvro.Builder(other);
        }
    }

    /**
     * Serializes this ECUCheckEventAvro to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
        } else {
            for (int i = 0; i < 0; i++) {
                switch (fieldOrder[i].pos()) {
                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    /**
     * RecordBuilder for ECUCheckEventAvro instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ECUCheckEventAvro>
            implements org.apache.avro.data.RecordBuilder<ECUCheckEventAvro> {


        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(ru.practicum.avro_example.ECUCheckEventAvro.Builder other) {
            super(other);
        }

        /**
         * Creates a Builder by copying an existing ECUCheckEventAvro instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(ru.practicum.avro_example.ECUCheckEventAvro other) {
            super(SCHEMA$, MODEL$);
        }

        @Override
        @SuppressWarnings("unchecked")
        public ECUCheckEventAvro build() {
            try {
                ECUCheckEventAvro record = new ECUCheckEventAvro();
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










